# Untitled notebook

```elixir
Mix.install(
  [
    {:nx, "~> 0.7.1"},
    {:exla, "~> 0.7.1"},
    {:number, "~> 1.0.4"}
  ],
  config: [
    nx: [default_backend: EXLA.Backend]
  ],
  system_env: [
    XLA_TARGET: "cuda120"
  ]
)
```

## Section

To compile EXLA for CUDA, set env var: **`XLA_TARGET="cuda120"`**, that's all.
When running, EXLA will look for available clients in this order: cuda, rocm, tpu, host. So cuda will be prioritised, there's no need to set it as default.

https://hexdocs.pm/exla/EXLA.html#module-configuration

```elixir
Nx.global_default_backend({EXLA.Backend, client: :cuda})

n = 1000
iters = 100
shape = {n, n}
key = Nx.Random.key(2137)
{t1, key} = Nx.Random.uniform(key, shape: shape)
{t2, _key} = Nx.Random.uniform(key, shape: shape)

calculation = fn ->
  0..(iters - 1)
  |> Enum.map(fn _ ->
    Nx.dot(t1, t2)
    |> Nx.sum(axes: [0, 1])
  end)
end

{time, res} = :timer.tc(calculation, [])
res |> Enum.at(iters - 1) |> IO.inspect()
~s/#{(time / 1000 / iters) |> Number.Delimit.number_to_delimited()} ms\/iter/ |> IO.puts()
```
